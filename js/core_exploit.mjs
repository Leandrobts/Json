// js/core_exploit.mjs
import { AdvancedInt64, isAdvancedInt64Object, PAUSE, toHex } from './utils.mjs';
import { logS3 as log } from './script3/s3_utils.mjs'; // Assumindo que logS3 é o logger padrão ou um logger configurado
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;
let isOOBEnvironmentSetup = false; // Flag para rastrear o estado do ambiente OOB

const toHexHelper = (val, bits = 32) => toHex(val, bits);

export function clearOOBEnvironment(options = { force_clear_even_if_not_setup: false }) {
    const FNAME_CLEAR = 'CoreExploit.clearOOBEnvironment';
    if (isOOBEnvironmentSetup || options.force_clear_even_if_not_setup) {
        // Log apenas se estava configurado ou se forçado, para evitar logs desnecessários
        // log(`Limpando ambiente OOB... (Setup anterior: ${isOOBEnvironmentSetup})`, 'info', FNAME_CLEAR);
    }
    oob_array_buffer_real = null;
    oob_dataview_real = null;
    if (isOOBEnvironmentSetup) { // Apenas loga que foi limpo se estava realmente setup
        // log(`Ambiente OOB limpo.`, 'info', FNAME_CLEAR);
    }
    isOOBEnvironmentSetup = false; // Resetar a flag
}

export function getOOBAllocationSize() {
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") {
        updateOOBConfigFromUI(document);
    }
    return OOB_CONFIG.ALLOCATION_SIZE;
}
// getBaseOffsetInDV e getInitialBufferSize permanecem os mesmos
export function getBaseOffsetInDV() { 
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") {
        updateOOBConfigFromUI(document); 
    }
    return OOB_CONFIG.BASE_OFFSET_IN_DV; 
}
export function getInitialBufferSize() { 
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") {
        updateOOBConfigFromUI(document); 
    }
    return OOB_CONFIG.INITIAL_BUFFER_SIZE; 
}


export async function triggerOOB_primitive(options = { force_reinit: false }) {
    const FNAME_TRIGGER = 'CoreExploit.triggerOOB_primitive';

    if (isOOBEnvironmentSetup && !options.force_reinit) {
        // Verifica se as variáveis ainda são válidas (uma verificação básica)
        if (oob_array_buffer_real && oob_dataview_real && oob_array_buffer_real.byteLength === getOOBAllocationSize() && oob_dataview_real.buffer === oob_array_buffer_real) {
            // log(`Ambiente OOB já configurado e parece válido. Pulando reconfiguração.`, 'info', FNAME_TRIGGER);
            return true; // Ambiente já está bom e aparentemente válido
        } else {
            log(`Ambiente OOB marcado como configurado, mas as variáveis são inválidas/inconsistentes. Forçando re-inicialização.`, 'warn', FNAME_TRIGGER);
            // Forçar limpeza e re-inicialização
            clearOOBEnvironment({ force_clear_even_if_not_setup: true }); 
            // A execução continuará para re-inicializar abaixo
        }
    }
    
    // Se chegou aqui, ou não estava configurado, ou force_reinit é true, ou as variáveis estavam inválidas.
    log(`--- Iniciando Configuração do Ambiente OOB (Force reinit: ${options.force_reinit}, Setup anterior: ${isOOBEnvironmentSetup}) ---`, 'test', FNAME_TRIGGER);
    const currentAllocSize = getOOBAllocationSize();

    log(`   Config OOB: AllocSize=${currentAllocSize}`, 'info', FNAME_TRIGGER);

    // Limpar explicitamente antes de (re)configurar
    clearOOBEnvironment({ force_clear_even_if_not_setup: true }); 

    try {
        // A vulnerabilidade real que permite o OOB seria acionada aqui.
        // O código abaixo apenas simula a criação de um buffer que seria usado para OOB.
        oob_array_buffer_real = new ArrayBuffer(currentAllocSize);
        oob_dataview_real = new DataView(oob_array_buffer_real, 0, currentAllocSize);

        log(`Ambiente para Operações OOB CONFIGURADO com sucesso.`, 'good', FNAME_TRIGGER);
        log(`   oob_array_buffer_real (total): ${oob_array_buffer_real.byteLength} bytes`, 'info', FNAME_TRIGGER);
        log(`   oob_dataview_real (janela controlada): offset=${oob_dataview_real.byteOffset}, length=${oob_dataview_real.byteLength} bytes`, 'info', FNAME_TRIGGER);
        
        isOOBEnvironmentSetup = true; // Marcar como configurado
        log(`--- Configuração do Ambiente OOB Concluída ---`, 'test', FNAME_TRIGGER);
        return true;

    } catch (e) {
        log(`ERRO CRÍTICO em ${FNAME_TRIGGER}: ${e.message}`, 'critical', FNAME_TRIGGER);
        console.error(e);
        clearOOBEnvironment({ force_clear_even_if_not_setup: true }); // Limpar em caso de falha
        // isOOBEnvironmentSetup já é false por causa do clearOOBEnvironment
        throw e; 
    }
}

export function oob_read_absolute(absolute_offset, byteLength) {
    const FNAME_READ = 'CoreExploit.oob_read_absolute';
    if (!isOOBEnvironmentSetup || !oob_dataview_real || oob_dataview_real.buffer.byteLength === 0) { 
        log(`ERRO: Ambiente OOB não inicializado ou inválido para leitura em ${toHexHelper(absolute_offset)}`, "error", FNAME_READ);
        // Se o buffer foi desanexado (byteLength === 0), o ambiente não é mais válido.
        if (oob_dataview_real && oob_dataview_real.buffer.byteLength === 0) {
            isOOBEnvironmentSetup = false; // Marcar como não mais configurado
        }
        throw new Error("Ambiente OOB não inicializado ou inválido para leitura.");
    }

    const relative_offset = absolute_offset;

    if (relative_offset < 0 || (relative_offset + byteLength) > oob_dataview_real.byteLength) {
        const errorMsg = `Leitura OOB (abs ${toHexHelper(absolute_offset)} -> rel ${toHexHelper(relative_offset)}, tam ${byteLength}) fora dos limites da DataView (0-${oob_dataview_real.byteLength})`;
        log(errorMsg, "error", FNAME_READ);
        throw new RangeError(errorMsg);
    }
    
    try {
        switch (byteLength) {
            case 1: return oob_dataview_real.getUint8(relative_offset);
            case 2: return oob_dataview_real.getUint16(relative_offset, true); 
            case 4: return oob_dataview_real.getUint32(relative_offset, true);
            case 8: {
                const low = oob_dataview_real.getUint32(relative_offset, true);
                const high = oob_dataview_real.getUint32(relative_offset + 4, true);
                return new AdvancedInt64(low, high);
            }
            default:
                log(`ERRO: Tamanho de leitura inválido: ${byteLength}`, "error", FNAME_READ);
                throw new Error(`Invalid byteLength for read: ${byteLength}`);
        }
    } catch (e) {
        log(`ERRO CRÍTICO em ${FNAME_READ} ao ler de ${toHexHelper(absolute_offset)} (rel ${toHexHelper(relative_offset)}): ${e.message}`, "critical", FNAME_READ);
        if (e.message.includes("detached") || (oob_dataview_real && oob_dataview_real.buffer.byteLength === 0)) {
            isOOBEnvironmentSetup = false; // Buffer desanexado, ambiente inválido
        }
        throw e; 
    }
}

export function oob_write_absolute(absolute_offset, value, byteLength) {
    const FNAME_WRITE = 'CoreExploit.oob_write_absolute';
    if (!isOOBEnvironmentSetup || !oob_dataview_real || oob_dataview_real.buffer.byteLength === 0) { 
        log(`ERRO: Ambiente OOB não inicializado ou inválido para escrita em ${toHexHelper(absolute_offset)}`, "error", FNAME_WRITE);
        if (oob_dataview_real && oob_dataview_real.buffer.byteLength === 0) {
            isOOBEnvironmentSetup = false;
        }
        throw new Error("Ambiente OOB não inicializado ou inválido para escrita.");
    }

    const relative_offset = absolute_offset;

    if (relative_offset < 0 || (relative_offset + byteLength) > oob_dataview_real.byteLength) {
        const errorMsg = `Escrita OOB (abs ${toHexHelper(absolute_offset)} -> rel ${toHexHelper(relative_offset)}, tam ${byteLength}) fora dos limites da DataView (0-${oob_dataview_real.byteLength})`;
        log(errorMsg, "error", FNAME_WRITE);
        throw new RangeError(errorMsg);
    }

    try {
        switch (byteLength) {
            case 1: oob_dataview_real.setUint8(relative_offset, Number(value)); break;
            case 2: oob_dataview_real.setUint16(relative_offset, Number(value), true); break;
            case 4: oob_dataview_real.setUint32(relative_offset, Number(value), true); break;
            case 8:
                if (!isAdvancedInt64Object(value)) {
                    throw new TypeError("Valor para escrita de 8 bytes deve ser AdvancedInt64");
                }
                oob_dataview_real.setUint32(relative_offset, value.low(), true);
                oob_dataview_real.setUint32(relative_offset + 4, value.high(), true);
                break;
            default:
                log(`ERRO: Tamanho de escrita inválido: ${byteLength}`, "error", FNAME_WRITE);
                throw new Error(`Invalid byteLength for write: ${byteLength}`);
        }
    } catch (e) {
        log(`ERRO CRÍTICO em ${FNAME_WRITE} ao escrever em ${toHexHelper(absolute_offset)} (rel ${toHexHelper(relative_offset)}): ${e.message}`, "critical", FNAME_WRITE);
        if (e.message.includes("detached") || (oob_dataview_real && oob_dataview_real.buffer.byteLength === 0)) {
            isOOBEnvironmentSetup = false; 
        }
        throw e;
    }
}

export async function selfTestOOBReadWrite(logFnParam) {
    // ... (código do selfTest como antes, mas agora ele chamará triggerOOB_primitive({ force_reinit: true });)
    const currentLog = logFnParam || log;
    const FNAME_TEST = 'CoreExploit.selfTestOOBReadWrite';
    currentLog(`--- Iniciando Auto-Teste de OOB R/W (com re-inicialização forçada) ---`, 'test', FNAME_TEST);
    let previousState = isOOBEnvironmentSetup; // Salvar estado anterior se necessário
    try {
        await triggerOOB_primitive({ force_reinit: true }); 
        
        const test_offset = 0x50; 
        const test_val32 = 0x11223344;
        const test_val64 = new AdvancedInt64(0xAABBCCDD, 0xEEFF0011);

        currentLog(`Escrevendo ${toHexHelper(test_val32)} em offset absoluto ${toHexHelper(test_offset)}`, "info", FNAME_TEST);
        oob_write_absolute(test_offset, test_val32, 4);
        const read_val32 = oob_read_absolute(test_offset, 4);
        if (read_val32 === test_val32) {
            currentLog(`SUCESSO: Lido ${toHexHelper(read_val32)} corretamente (32bit).`, "good", FNAME_TEST);
        } else {
            currentLog(`FALHA: Lido ${toHexHelper(read_val32)}, esperado ${toHexHelper(test_val32)}.`, "error", FNAME_TEST); throw new Error("Self-test 32bit failed");
        }

        const next_offset = test_offset + 8;
        currentLog(`Escrevendo ${test_val64.toString(true)} em offset absoluto ${toHexHelper(next_offset)}`, "info", FNAME_TEST);
        oob_write_absolute(next_offset, test_val64, 8);
        const read_val64 = oob_read_absolute(next_offset, 8);
        if (isAdvancedInt64Object(read_val64) && read_val64.equals(test_val64)) {
            currentLog(`SUCESSO: Lido ${read_val64.toString(true)} corretamente (64bit).`, "good", FNAME_TEST);
        } else {
            currentLog(`FALHA: Lido ${isAdvancedInt64Object(read_val64) ? read_val64.toString(true) : String(read_val64)}, esperado ${test_val64.toString(true)}.`, "error", FNAME_TEST); throw new Error("Self-test 64bit failed");
        }
        currentLog(`--- Auto-Teste de OOB R/W Concluído ---`, 'test', FNAME_TEST);
        return true;
    } catch (e) {
        currentLog(`ERRO no Auto-Teste OOB R/W: ${e.message}`, 'critical', FNAME_TEST);
        // isOOBEnvironmentSetup já será false se triggerOOB_primitive ou R/W falhar e setar a flag
        return false;
    } finally {
        // Decide se quer restaurar o estado anterior de isOOBEnvironmentSetup ou manter como está
        // Para um self-test, geralmente ele configura e testa, não precisa restaurar um estado global "anterior"
        // A menos que o self-test seja chamado no meio de uma cadeia de exploit.
        // Se force_reinit foi true, e o teste passou, isOOBEnvironmentSetup será true.
    }
}

export function isOOBReady() {
    // Uma verificação mais robusta
    return isOOBEnvironmentSetup && 
           oob_array_buffer_real instanceof ArrayBuffer &&
           oob_dataview_real instanceof DataView &&
           oob_array_buffer_real.byteLength > 0 && // Garante que não seja um buffer "vazio" por erro
           oob_dataview_real.buffer === oob_array_buffer_real && // Garante que a DataView ainda usa o buffer correto
           oob_dataview_real.buffer.byteLength > 0; // Garante que o buffer da DataView não foi desanexado/zerado
}
